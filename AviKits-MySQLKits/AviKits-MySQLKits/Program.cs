using AviKits_MySQLKits.Models;
using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Serialization;

namespace AviKits_MySQLKits
{
    class Program
    {
        public static string kitsTable = "";
        public static string modifiedTable = "";
        public static string ConnString = "";

        public static MySqlConnection Connection { get; set; }

        public static void Main(string[] args)
        {
            ConnString = GetDatabaseConnection();

            GetTables(out string kTable, out string kitsModifiedTable);
            kitsTable = kTable;
            modifiedTable = kitsModifiedTable;

            GetFile(out string location);

            XmlSerializer serializer = new XmlSerializer(typeof(Kits));
            Kits result;
            using (StreamReader reader = new StreamReader(location))
            {
                result = (Kits)serializer.Deserialize(reader);
            }
            Console.WriteLine($"SUCCESSFULLY DESERIALIZED ALL {result.Kit.Count} KITS");

            Connection.Open();

            foreach (Kit kit in result.Kit)
                UploadKits(kit);
            Console.Read();
        }

        public static string GetDatabaseConnection()
        {
            string connString = "";
            while (true)
            {
                Console.Write("Please type in the IP of the database server: ");
                string ip = Console.ReadLine();
                Console.Write("Please type in the username of the database server: ");
                string username = Console.ReadLine();
                Console.Write("Please type in the database name of the database server: ");
                string database = Console.ReadLine();
                Console.Write("Please type in the port of the database server (default is 3306): ");
                string port = Console.ReadLine();
                Console.Write("Please type in the password of the database server: ");
                string password = Console.ReadLine();

                connString = $"server={ip};user={username};database={database};port=3306;password={password}";
                try
                {
                    Connection = new MySqlConnection(connString);
                    Connection.Open();
                    Connection.Close();
                } catch
                {
                    Console.WriteLine("There was an error in connecting to the database, please make sure your connection details are correct");
                    continue;
                }
                break;
            }
            return connString;
        }

        public static void GetTables(out string kitsTable, out string kitsModifiedTable)
        {
            Console.WriteLine("MAKE SURE THE TABLES ARE GENERATED BY MYSQLKITS ALREADY, IF THEY ARE NOT IT'LL ERROR, GO AND FIRST GENERATE THEM IF YOU HAVEN'T ALREADY");
            Console.Write("Please type in the name of the kits table (eg. kits): ");
            kitsTable = Console.ReadLine();
            Console.Write("Please type in the name of the kits modified table (eg. kits_modified): ");
            kitsModifiedTable = Console.ReadLine();
        }

        public static void GetFile(out string location)
        {
            while (true)
            {
                Console.WriteLine(@"Please type in the directory where the file is supposed to be(eg.C:\Users\Home\Desktop\AviKits.configuration.xml)");
                string loc = Console.ReadLine();
                if (File.Exists(loc))
                {
                    location = loc;
                    break;
                } else
                {
                    Console.WriteLine("File not found, please type in the correct directory!");
                    continue;
                }
            }
        }

        public static void UploadKits(Kit kit)
        {
            Console.WriteLine($"Kit Name: {kit.Name} \n Kit Cooldown: {kit.Cooldown} seconds \n Kit Cost: {kit.UseCost}");
            string content = "";
            Dictionary<string, int> ItemAmounts = new Dictionary<string, int>();

            foreach (Item item in kit.Items.Item)
            {
                if (item.Magazine == null)
                {
                    if (ItemAmounts.TryGetValue(item.Id, out int value))
                    {
                        ItemAmounts[item.Id] += 1;
                    } else
                    {
                        ItemAmounts.Add(item.Id, Convert.ToInt32(item.Amount));
                    }
                } else
                {
                    UploadModifiedGun(item, $"{kit.Name}-{item.Id}");
                    content += $"m.{kit.Name}-{item.Id} ";
                }
            }

            foreach (var item in ItemAmounts)
            {
                if (item.Value != 1)
                    content += $"{item.Key}/{item.Value} ";
                else
                    content += $"{item.Key} ";
            }

            if (!string.IsNullOrEmpty(kit.VehicleId))
            {
                content += $"v.{kit.VehicleId} ";
            }

            if (!string.IsNullOrEmpty(kit.Xp))
            {
                content += $"xp.{kit.Xp} ";
            }

            Console.WriteLine($"INSERT IGNORE INTO `{kitsTable}` (`Name`, `Content`, `Cost`, `Cooldown`) VALUES ('{kit.Name}', '{content.Trim()}', '{(string.IsNullOrEmpty(kit.UseCost) ? "0.00" : kit.UseCost)}', '{(string.IsNullOrEmpty(kit.Cooldown) ? "0" : kit.Cooldown)}');");
            new MySqlCommand($"INSERT IGNORE INTO `{kitsTable}` (`Name`, `Content`, `Cost`, `Cooldown`) VALUES ('{kit.Name}', '{content.Trim()}', '{(string.IsNullOrEmpty(kit.UseCost) ? "0.00" : kit.UseCost)}', '{(string.IsNullOrEmpty(kit.Cooldown) ? "0" : kit.Cooldown)}');", Connection).ExecuteScalar();

            Console.WriteLine();
        }

        public static void UploadModifiedGun(Item item, string name)
        {
            int firemode = 0;

            switch (item.Firemode.ToLower())
            {
                case "safety":
                    firemode = 0;
                    break;
                case "semi":
                    firemode = 1;
                    break;
                case "auto":
                    firemode = 2;
                    break;
                case "burst":
                    firemode = 3;
                    break;
            }

            Console.WriteLine($"INSERT IGNORE INTO `{modifiedTable}` (`Weapon`, `ID`, `Clip`, `Sight`, `Tactical`, `Grip`, `Barrel`, `Magazine`, `Firemode`) VALUES ('{name}', '{item.Id}', '{item.Ammo}', '{(item.Sight == null ? "0" : item.Sight.Id)}', '{(item.Tactical == null ? "0" : item.Tactical.Id)}', '{(item.Grip == null ? "0" : item.Grip.Id)}', '{(item.Barrel == null ? "0" : item.Barrel.Id)}', '{(item.Magazine == null ? "0" : item.Magazine.Id)}', '{firemode}');");
            new MySqlCommand($"INSERT IGNORE INTO `{modifiedTable}` (`Weapon`, `ID`, `Clip`, `Sight`, `Tactical`, `Grip`, `Barrel`, `Magazine`, `Firemode`) VALUES ('{name}', '{item.Id}', '{item.Ammo}', '{(item.Sight == null ? "0" : item.Sight.Id)}', '{(item.Tactical == null ? "0" : item.Tactical.Id)}', '{(item.Grip == null ? "0" : item.Grip.Id)}', '{(item.Barrel == null ? "0" : item.Barrel.Id)}', '{(item.Magazine == null ? "0" : item.Magazine.Id)}', '{firemode}');", Connection).ExecuteScalar();
        }
    }
}
